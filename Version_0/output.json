[
  {
    "elementType": "ALERT",
    "code": "import React, { forwardRef } from \"react\";\nimport DOMPurify from \"dompurify\";\nimport { Alert, AlertProps, AlertTitle } from \"@mui/material\";\n\nexport type KdAlertProps = AlertProps;\n\nconst KdAlert = forwardRef<HTMLDivElement, KdAlertProps>(function KdAlert(\n  props: KdAlertProps,\n  ref\n) {\n  const color = {\n    success: \"bg-light-success\",\n    info: \"bg-light-info\",\n    warning: \"bg-light-warning\",\n    error: \"bg-light-danger\",\n  }[props.severity ?? \"info\"];\n\n  const className = props.className ?? \"d-flex align-items-center mb-50\";\n\n  const cleanValueTitle = DOMPurify.sanitize(props.title ?? \"\", {\n    USE_PROFILES: { html: true },\n  });\n  const cleanValueChildren = DOMPurify.sanitize(\n    (props.children as string) ?? \"\",\n    {\n      USE_PROFILES: { html: true },\n    }\n  );\n\n  return (\n    <Alert\n      ref={ref}\n      severity={props.severity}\n      className={`${className} ${color}`}\n    >\n      {props.title && (\n        <AlertTitle>\n          <div\n            dangerouslySetInnerHTML={{\n              __html: cleanValueTitle,\n            }}\n          />\n        </AlertTitle>\n      )}\n      <div\n        dangerouslySetInnerHTML={{\n          __html: cleanValueChildren,\n        }}\n      />\n    </Alert>\n  );\n});\n\nexport default KdAlert;\n",
    "meta": "{\n  elementType: \"KdAlert\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    children: { type: \"static\", content: \"مقدار\" },\n    title: { type: \"static\", content: \"توجه\" },\n    severity: { type: \"static\", content: \"success\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Alert component is a customizable alert component built on top of MUI's Alert component,\nand use from Alert component of MUI.\nIt maintains a consistent appearance with a contained variant and customizable styles via props.\nName Tag : KdAlert\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- severity: success | info | warning | error\n\ndynamic attrs:\n1- title: string\n2- children: string"
  },
  {
    "elementType": "BUTTON",
    "code": "import React from \"react\";\nimport Button, { ButtonProps } from \"@mui/material/Button\";\nimport { KdpaTooltip } from \"../../Tooltips\";\nimport { CircularProgress } from \"@mui/material\";\n\n// import \"./kdpaPrimaryButton.scss\";\n\nexport interface KdpaPrimaryButtonProps extends ButtonProps {\n  children?: React.ReactNode;\n  icon?: JSX.Element;\n  tooltipText?: string;\n  loading?: boolean;\n  onClick?: () => void;\n  [x: string]: any;\n}\n\nfunction KdpaPrimaryButton({\n  children,\n  icon,\n  tooltipText,\n  onClick,\n  loading,\n  disabled,\n  ...props\n}: KdpaPrimaryButtonProps) {\n  const ButtonContent = (\n    <Button\n      onClick={onClick}\n      variant=\"contained\"\n      sx={{ minWidth: \"36px\" }}\n      startIcon={icon}\n      {...props}\n      disabled={loading || disabled}\n    >\n      {loading ? (\n        <CircularProgress\n          color=\"inherit\"\n          size={18}\n          sx={{ marginY: \"4px\", marginX: \"12px\" }}\n        />\n      ) : (\n        children\n      )}\n    </Button>\n  );\n\n  return tooltipText ? (\n    <KdpaTooltip title={tooltipText}>{ButtonContent}</KdpaTooltip>\n  ) : (\n    ButtonContent\n  );\n}\n\nexport default KdpaPrimaryButton;\n",
    "meta": "{\n  elementType: \"KdpaPrimaryButton\",\n  children: [],\n  parentId: \"\",\n  style: {\n    minWidth: { type: \"static\", content: \"80px\" },\n    // minHeight: { type: \"static\", content: \"50px\" },\n    borderRadius: { type: \"static\", content: \"8px\" },\n    fontSize: { type: \"static\", content: \"14px\" },\n    // fontWeight: { type: \"static\", content: \"600\" },\n    display: { type: \"static\", content: \"flex\" },\n    flexDirection: { type: \"static\", content: \"row\" },\n    gap: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {},\n  innerChildren: [{ type: \"static\", content: \"button\" }],\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Button component is a customizable button built on top of MUI's Button component,\ndesigned for use throughout the application.\nIt maintains a consistent appearance with a contained variant and customizable styles via props,\nmaking it a versatile and reusable button component.\nThis component used instead of button tag in the application.\nName Tag : KdpaPrimaryButton\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- variant: contained | outlined | standard\n2- children: string\n\ndynamic attrs:\n1- title: string\n2- loading: boolean"
  },
  {
    "elementType": "CARD_ELEMENT",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The card element is component for map in any list of data and show it in card view.\nin the provider is Grid component from material-ui and in the children is the data that we want to show in card view.\nchildren element: any element\n\nstatic attrs:\n1- noOptionsText: string\n\ndynamic attrs:\n1- data: list of objects"
  },
  {
    "elementType": "CHECK_BOX",
    "code": "import React from \"react\";\nimport Checkbox, { CheckboxProps } from \"@mui/material/Checkbox\";\n\nexport type KdpaCheckBoxProps = CheckboxProps;\n\nconst KdpaCheckBox = React.forwardRef<HTMLInputElement, KdpaCheckBoxProps>(\n  (props, ref) => {\n    return <Checkbox {...props} className={props.className} inputRef={ref} />;\n  }\n);\n\nexport default KdpaCheckBox;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    defaultChecked: { type: \"static\", content: true },\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaFormControlLabel\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            control: {\n              type: \"element\",\n              content: {\n                elementType: \"KdpaCheckBox\",\n                children: [],\n                parentId: \"\",\n                style: {},\n                attrs: {},\n                selfClosing: true,\n                dependency: {\n                  type: \"package\",\n                  version: \"latest\",\n                  path: \"kdpa-components\",\n                  meta: {\n                    namedImport: true,\n                  },\n                },\n              },\n            },\n            checked: {\n              type: \"codeBlock\",\n              code: \"$args[0]?.value\",\n            },\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          selfClosing: true,\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The CheckBox component is a customizable checkbox built on top of MUI's Checkbox component,\ndesigned for use throughout the application.\nName Tag : KdpaCheckBox\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n\ndynamic attrs:\n1- title: string\n2- defaultValue: boolean"
  },
  {
    "elementType": "COLUMN_CHART",
    "code": "import { GenerateDataChart3D } from \"./KdChart3DHelper\";\nimport KdChart, { KdChartProps } from \"../KdChart/KdChart\";\n\nexport type KdChart3DProps = KdChartProps & {\n  data?: { [key: string]: unknown }[];\n  groupBy?: string;\n  seriesBy?: string;\n  valueBy?: string;\n};\n\nconst KdChart3D = ({\n  data = [],\n  groupBy = \"\",\n  seriesBy = \"\",\n  valueBy = \"\",\n  ...props\n}: KdChart3DProps) => {\n  const { series, uniqueCategoryArray } = GenerateDataChart3D(\n    data,\n    groupBy,\n    seriesBy,\n    valueBy\n  );\n  return (\n    <KdChart\n      noDataText={data.length === 0 ? \"بدون داده\" : \"داده های شما سازگار نیست\"}\n      labels={(uniqueCategoryArray as string[]) ?? []}\n      series={series}\n      {...props}\n    />\n  );\n};\n\nexport default KdChart3D;\n",
    "meta": "{\n  elementType: \"KdChart3D\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"bar\" },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: { namedImport: true },\n  },\n}",
    "description": "The Column Chart component is a customizable 3D chart built on top of ApexCharts,\nthis chart in 3D and can use it to show data in 3D.\nName Tag : KdChart3D\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- titleText: string\n2- xaxisTitle: string\n3- yaxisTitle: string\n4- type: bar | area | line | scatter | heatmap | radar\n5- barHorizontal: boolean\n6- toolbar: boolean\n7- stacked: boolean\n8- stackType: normal | 100%\n\ndynamic attrs:\n1- data: list of { group: string, series: string, value: string}"
  },
  {
    "elementType": "DATE_PANEL",
    "code": "import { useMemo, useState } from \"react\";\nimport moment from \"jalali-moment\";\n\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  FilledInputProps,\n  InputProps,\n  OutlinedInputProps,\n} from \"@mui/material\";\nimport { DatePicker, DatePickerProps } from \"@mui/x-date-pickers/DatePicker\";\nimport { AdapterDateFns as Gregory } from \"@mui/x-date-pickers/AdapterDateFnsV3\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterDateFnsJalali as Jalali } from \"@mui/x-date-pickers/AdapterDateFnsJalali\";\n\nimport { DatePickerToolbar } from \"@mui/x-date-pickers/DatePicker\";\n\nimport { KdpaTypography } from \"../../Typography\";\n\nimport \"./KdpaDatePicker.scss\";\n\nexport type KdpaDatePickerProps<T> = DatePickerProps<T> & {\n  changeLocale?: boolean;\n  required?: boolean;\n  locale?: \"fa\" | \"en\" | \"ar\";\n  variant?: \"standard\" | \"outlined\" | \"filled\";\n  sx?: any;\n  helperText?: string;\n  title?: string;\n  error?: boolean;\n  InputProps?:\n    | Partial<InputProps>\n    | Partial<OutlinedInputProps>\n    | Partial<FilledInputProps>\n    | undefined;\n  minDateValue?: \"TODAY\" | \"CUSTOM\";\n  maxDateValue?: \"TODAY\" | \"CUSTOM\";\n  [x: string]: any;\n};\n\nfunction KdpaDatePicker<T>({\n  changeLocale = false,\n  locale,\n  defaultValue,\n  value,\n  variant = \"outlined\",\n  required,\n  sx = {},\n  minDateValue,\n  maxDateValue,\n  ...props\n}: KdpaDatePickerProps<T>) {\n  const defaultLocale = locale || localStorage.getItem(\"i18nextLng\") || \"fa\";\n\n  const [loc, setLoc] = useState<string>(defaultLocale);\n\n  const adaptor = useMemo(() => {\n    switch (loc) {\n      case \"fa\":\n        return Jalali;\n      case \"en\":\n        return Gregory;\n      case \"ar\":\n        return Gregory;\n      default:\n        return Jalali;\n    }\n  }, [loc]);\n\n  function CustomToolbar(props: any) {\n    return (\n      <Box\n        className={props.className}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <DatePickerToolbar {...props} />\n        <Box\n          sx={{\n            display: \"flex\",\n            width: \"100%\",\n            margin: \"1em 1.5em 0 1.5em\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <KdpaTypography>\n            {loc === \"fa\" ? \"تقویم جلالی\" : \"تقویم میلادی\"}\n          </KdpaTypography>\n          <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n            <Button\n              disabled={loc === \"en\"}\n              onClick={() => setLoc(\"en\")}\n              sx={{\n                \"&.Mui-disabled\": {\n                  color: \"#fff\",\n                },\n                backgroundColor: loc === \"en\" ? \"primary.light\" : \"unset\",\n              }}\n            >\n              M\n            </Button>\n            <Button\n              disabled={loc === \"fa\"}\n              onClick={() => setLoc(\"fa\")}\n              sx={{\n                \"&.Mui-disabled\": {\n                  color: \"#fff\",\n                },\n                backgroundColor: loc === \"fa\" ? \"primary.light\" : \"unset\",\n              }}\n            >\n              J\n            </Button>\n          </ButtonGroup>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <LocalizationProvider dateAdapter={adaptor}>\n      <DatePicker\n        slotProps={{\n          textField: {\n            variant,\n            size: \"small\",\n            required,\n            error: props?.error,\n            helperText: props?.error ? undefined : props?.helperText,\n            InputProps: props?.InputProps,\n            title: props?.title,\n            InputLabelProps: props?.InputLabelProps,\n          },\n        }}\n        //@ts-ignore\n        slots={\n          changeLocale && {\n            toolbar: CustomToolbar,\n          }\n        }\n        sx={{ width: \"100%\", ...sx }}\n        {...props}\n        onChange={(value) => {\n          // convert type date to ISO\n          //@ts-ignore\n          const convertValue = moment(value).locale(\"en\").format();\n          //@ts-ignore\n          props?.onChange(\n            convertValue.toString() === \"Invalid date\" ? null : convertValue\n          );\n        }}\n        {...(defaultValue\n          ? //@ts-ignore\n            { defaultValue: new Date(defaultValue || null) }\n          : {})}\n        //@ts-ignore\n        value={value ? new Date(value || null) : null}\n        minDate={\n          minDateValue === \"TODAY\"\n            ? (new Date() as T)\n            : minDateValue === \"CUSTOM\" && props?.minDate\n            ? (new Date(props?.minDate as any) as T)\n            : props?.minDate\n        }\n        maxDate={\n          maxDateValue === \"TODAY\"\n            ? (new Date() as T)\n            : maxDateValue === \"CUSTOM\" && props?.maxDate\n            ? (new Date(props?.maxDate as any) as T)\n            : props?.maxDate\n        }\n      />\n    </LocalizationProvider>\n  );\n}\n\nexport default KdpaDatePicker;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaDatePicker\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The DataPaned is a date picker component built on top of Mui/x-data-grid's DatePicker component,\nand use for date jalaali or ... date picker.\nName Tag : KdpaDatePicker\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- placeholder: string\n3- helperText: string\n4- variant: filled | outlined | standard\n5- changeLocale: boolean\n6- locale: fa | en\n7- format: \"dd-MM-yyyy\" | \"MM-dd-yyyy\" | ...\n8- views: list of (day | month | year)\n\ndynamic attrs:\n1- title: string\n2- defaultValue: string"
  },
  {
    "elementType": "DIV",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Div component is a customizable div built on top of HTML's div element,\nthis use Grid system from MUI and can use it to show data in div.\nand use instead of div or span or ui or li or ... in your project.\nName Tag : KdpaGrid\nchildren element: any element"
  },
  {
    "elementType": "DIVIDER",
    "code": "import { Divider, DividerProps } from \"@mui/material\";\n\nexport type KdpaDividerProps = DividerProps;\n\nexport interface KdpaDividerCustomProps {\n  gridActionsStyle?: boolean;\n}\n\nfunction KdpaDivider({\n  gridActionsStyle = false,\n  ...props\n}: KdpaDividerProps & KdpaDividerCustomProps) {\n  if (gridActionsStyle)\n    return (\n      <Divider\n        orientation=\"vertical\"\n        variant=\"middle\"\n        flexItem\n        sx={{\n          height: \"25px\",\n          alignSelf: \"center\",\n        }}\n        {...props}\n      />\n    );\n  else return <Divider {...props} />;\n}\n\nexport default KdpaDivider;\n",
    "meta": "{\n  elementType: \"KdpaDivider\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Divider component is a customizable divider built on top of MUI's Divider component,\nit can be use separate content in the page.\nName Tag : KdDivider\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- orientation: horizontal | vertical"
  },
  {
    "elementType": "DROP_DOWN_LIST",
    "code": "import React from \"react\";\nimport Autocomplete, { AutocompleteProps } from \"@mui/material/Autocomplete\";\nimport { KdpaInput } from \"../../Input\";\n\nexport type KdpaAutoCompleteProps<T> = AutocompleteProps<\n  T,\n  boolean,\n  boolean,\n  boolean\n> & {\n  label?: string;\n  placeholder?: string;\n  variant?: \"outlined\" | \"filled\" | \"standard\" | undefined;\n  helperText?: string;\n  error?: boolean;\n};\n\nfunction KdpaAutoComplete<T>(props: KdpaAutoCompleteProps<T>) {\n  return (\n    <Autocomplete\n      {...props}\n      options={props.options ?? []}\n      renderInput={\n        props.renderInput\n          ? props.renderInput\n          : (params) => (\n              <KdpaInput\n                {...params}\n                size=\"small\"\n                placeholder={props?.placeholder}\n                variant={props?.variant}\n                label={props.label}\n                helperText={props?.error ? undefined : props?.helperText}\n                error={props?.error}\n              />\n            )\n      }\n    />\n  );\n}\nexport default KdpaAutoComplete;\n",
    "meta": "{\n  elementType: \"KdDropDownField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  selfClosing: true,\n  attrs: {\n    variant: { type: \"static\", content: \"outlined\" },\n    multiple: { type: \"static\", content: false },\n    noOptionsText: { type: \"static\", content: \"بدون مقدار\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The DropDownList component is a customizable dropdown built on top of MUI's AutoComplete component,\nit can be use to select one item from a list of items.\nName Tag : KdDropDownList\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- placeholder: string\n3- helperText: string\n4- variant: filled | outlined | standard\n5- size: small | medium\n6- multiple: boolean\n7- limitTags: number\n8- noOptionsText: string\n9- disableCloseOnSelect: boolean\n10- disableClearable: boolean\n11- disableSearchable: boolean\n\ndynamic attrs:\n1- title: string\n2- defaultValue: {id:string , label: string}\n3- options: list of {id:string , label: string}"
  },
  {
    "elementType": "FILE_BROWSER",
    "code": "import { CSSProperties, useEffect, useState } from \"react\";\nimport { FiUpload } from \"react-icons/fi\";\nimport {\n  KdpaSecondaryButton,\n  KdpaTypography,\n  KdpaUploadedFile,\n  KdpaUploadingFile,\n  KdpaUseFileUploadHook,\n} from \"../../../../components\";\nimport { getFileExtensions } from \"./componentHelper\";\nimport { fetchFilesProperty, urlCreator } from \"../../../utils/sharedUtils\";\n\nexport type TypeAcceptUploader = {\n  image?: string[] | \"ALL\";\n  video?: string[] | \"ALL\";\n  text?: string[] | \"ALL\";\n  compress?: string[] | \"ALL\";\n};\n\nexport interface KdFileUploaderProps {\n  label?: string;\n  placeholder?: string;\n  multiple?: boolean;\n  required?: boolean;\n  defaultValue?: string[] | string;\n  accept?: TypeAcceptUploader;\n  fileSizeLimit?: number;\n  fileCountLimit?: number;\n  onError: (message: string) => void;\n  pathProp: {\n    APIURL?: string;\n    sessionId?: string;\n  };\n  value?: string[] | string;\n  inputStyle?: CSSProperties;\n  style?: CSSProperties;\n  downloadSmallSize?: boolean;\n  [x: string]: any;\n}\n\nfunction KdFileUploader({\n  label,\n  defaultValue,\n  placeholder,\n  multiple = false,\n  accept,\n  fileCountLimit,\n  fileSizeLimit,\n  onError,\n  pathProp,\n  inputStyle,\n  style,\n  required,\n  downloadSmallSize,\n  ...props\n}: KdFileUploaderProps) {\n  const {\n    files: tempFilesUploaded,\n    removeFile,\n    uploadingFiles,\n    handleFileChange,\n    fileExtension,\n    APIURL,\n  } = KdpaUseFileUploadHook({\n    multiple,\n    APIURL: pathProp?.APIURL,\n    sessionId: pathProp?.sessionId,\n    onError: onError,\n    fileSizeLimit: fileSizeLimit,\n    fileCountLimit: fileCountLimit,\n  });\n\n  const [value, setValue] = useState<{ fileName?: string; session: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (props?.value === null && value.length > 0) {\n      value.forEach((item) => removeFile(item.session));\n      setValue([]);\n    }\n  }, [props?.value]);\n  // first render for check default value\n  useEffect(() => {\n    const fetchAndSetFileProperties = async () => {\n      if (defaultValue) {\n        const defaultSessions = Array.isArray(defaultValue)\n          ? [...defaultValue]\n          : [defaultValue];\n        const data = await fetchFilesProperty(\n          APIURL,\n          defaultSessions,\n          pathProp?.sessionId\n        );\n\n        setValue(\n          defaultSessions.map((session) => ({\n            fileName: (data ?? []).find((el: any) => el.guid === session)\n              ?.fileName,\n            session: session,\n          }))\n        );\n      } else {\n        setValue([]);\n      }\n    };\n\n    fetchAndSetFileProperties();\n  }, [defaultValue]);\n\n  // handle uploaded file\n  useEffect(() => {\n    if (tempFilesUploaded) {\n      if (multiple)\n        setValue((old) => [\n          ...old,\n          ...(tempFilesUploaded\n            .filter((file) => !value.find((el) => el.session === file.session))\n            .map((file) => ({\n              fileName: file.fileName,\n              session: file.session,\n            })) ?? []),\n        ]);\n      else if (tempFilesUploaded.length > 0)\n        setValue([\n          {\n            fileName: tempFilesUploaded[0]?.fileName,\n            session: tempFilesUploaded[0]?.session,\n          },\n        ]);\n    }\n  }, [tempFilesUploaded]);\n\n  // all changes in files value should be apply to onChange form and set value form\n  useEffect(() => {\n    if (props.onChange) {\n      if (multiple) props.onChange((value ?? []).map((item) => item.session));\n      else if (value.length > 0)\n        props.onChange(value[value.length - 1]?.session);\n      else props.onChange();\n    }\n  }, [value]);\n\n  const onDelete = (session: string) => {\n    setValue((old) => old.filter((value) => value.session !== session));\n    if (\n      tempFilesUploaded?.find((item) => item.session === session) &&\n      removeFile\n    )\n      removeFile(session);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        gap: \"10px\",\n        alignItems: \"center\",\n        width: \"100%\",\n        ...style,\n      }}\n    >\n      <KdpaTypography>\n        {label} {required && \"*\"}\n      </KdpaTypography>\n\n      <label htmlFor={`icon-button-file-${props.name}`}>\n        <KdpaSecondaryButton\n          component=\"span\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            gap: \"5px\",\n            ...inputStyle,\n            ...(props?.disabled && { opacity: \"0.5\" }),\n          }}\n        >\n          <FiUpload />\n          {placeholder}\n        </KdpaSecondaryButton>\n      </label>\n      <input\n        style={{ display: \"none\" }}\n        accept={\n          fileExtension && accept\n            ? getFileExtensions(accept, fileExtension)\n            : \"*\"\n        }\n        id={`icon-button-file-${props.name}`}\n        type=\"file\"\n        multiple={multiple}\n        onChange={(e) => {\n          handleFileChange(e, accept);\n        }}\n        disabled={props?.disabled}\n      />\n\n      <input type=\"hidden\" {...props} value={value?.map((el) => el.session)} />\n\n      {value &&\n        value.map((item) => {\n          const url = urlCreator(APIURL, item.session);\n\n          return (\n            <KdpaUploadedFile\n              sessionId={item?.session}\n              smallUrl={url.thumbnail_URL}\n              largeUrl={url.larg_URL}\n              fileName={item?.fileName}\n              onDelete={props.disabled ? undefined : onDelete}\n              downloadSmallSize={downloadSmallSize}\n              modal={true}\n              extention={item.fileName?.split(\".\").pop()}\n            />\n          );\n        })}\n      {uploadingFiles &&\n        (multiple || value.length === 0) &&\n        uploadingFiles.map((item) => {\n          return <KdpaUploadingFile progress={item.progress} />;\n        })}\n    </div>\n  );\n}\n\nexport default KdFileUploader;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    label: { type: \"static\", content: \"file uploader\" },\n    placeholder: { type: \"static\", content: \"فایل\" },\n    accept: {\n      type: \"static\",\n      content: { image: \"ALL\", text: \"ALL\", compress: \"ALL\", video: \"ALL\" },\n    },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdFileUploader\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The FileBrowser component is a simple customizable file browser,\nthis component is simple and user can be upload one file.\nName Tag : KdFileBrowser\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- fileSizeLimit: number\n3- accept: list of (image | video | text | compress)\n\ndynamic attrs:\n1- defaultValue: string\n"
  },
  {
    "elementType": "FORM_LOADER",
    "code": "import React, { CSSProperties } from \"react\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { FormProvider, UseFormReturn } from \"react-hook-form\";\n\nimport \"./kdFormContainer.scss\";\n\nexport interface KdFormContainerProps {\n  style?: CSSProperties;\n  sx?: CSSProperties;\n  children: React.ReactNode;\n  loading?: boolean;\n  submitLoading?: boolean;\n  formState: UseFormReturn;\n  defaultValues?: { [x: string]: any };\n  onSubmit?: (data: unknown) => void;\n}\n\nfunction KdFormContainer({\n  style,\n  sx,\n  children,\n  onSubmit,\n  loading = false,\n  submitLoading = false,\n  formState,\n}: KdFormContainerProps) {\n  return (\n    <FormProvider {...formState}>\n      <form\n        className=\"kdpa-form-container\"\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          if (event) {\n            if (typeof event.preventDefault === \"function\") {\n              event.preventDefault();\n            }\n            if (typeof event.stopPropagation === \"function\") {\n              event.stopPropagation();\n            }\n          }\n\n          return formState?.handleSubmit(async (values: any) => {\n            onSubmit?.(values);\n          })(event);\n        }}\n        style={{ ...sx, ...style }}\n      >\n        {loading ? <CircularProgress /> : children}\n        {submitLoading && (\n          <div className=\"kdpa-form-container__loading\">\n            <CircularProgress />\n          </div>\n        )}\n      </form>\n    </FormProvider>\n  );\n}\n\nexport default React.memo(KdFormContainer);\n",
    "meta": "{\n  elementType: \"KdFormContainer\",\n  children: [],\n  parentId: \"\",\n  style: {\n    backgroundColor: { type: \"static\", content: \"white\" },\n  },\n  attrs: {\n    errorMode: { type: \"static\", content: \"onSubmit\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The FormLoader is a component of form provider of package react-hook-form,\nand used in wrapper of any form in my application.\nName Tag : KdFormLoader\nchildren element: any element\n\nstatic attrs:\n1- errorMode: onSubmit | onChange\n\ndynamic attrs:\n1- loading: boolean"
  },
  {
    "elementType": "HEADER_FIELD",
    "code": "import React, { ReactElement, useState } from \"react\";\nimport { AiOutlineMinusCircle, AiOutlinePlusCircle } from \"react-icons/ai\";\nimport { KdpaCollapse } from \"../Collapse\";\nimport { KdpaTooltip } from \"../Tooltips\";\nimport { KdpaGrid, KdpaGridProps } from \"../Grid\";\nimport { useTheme } from \"@mui/system\";\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\nexport interface KdpaSegmentProps extends KdpaGridProps {\n  children?: ReactElement;\n  label: string;\n  maxLength?: number;\n  expandable?: boolean;\n  defaultOpen?: boolean;\n}\n\nfunction KdpaSegment({\n  children,\n  label = \"\",\n  maxLength = 23,\n  expandable = false,\n  defaultOpen = true,\n  color,\n  ...props\n}: KdpaSegmentProps) {\n  const labelSize = Math.min(maxLength, label.length) * 7;\n  const [isOpened, setIsOpened] = useState(defaultOpen ?? true);\n\n  const theme = useTheme();\n\n  const primaryColor =\n    color || theme.palette?.primary?.main || \"var(--bs-primary,#7367AA)\";\n  const borderColor = color || \"#ebe9f1\";\n\n  const handleToggleSegment = () => {\n    setIsOpened((prev) => !prev);\n  };\n\n  return (\n    <KdpaGrid sx={{ ...props.style, ...props.sx, width: \"100%\" }}>\n      <KdpaGrid\n        xs={12}\n        container\n        sx={{\n          borderStyle: \"solid\",\n          borderWidth: \"1px\",\n          borderColor: borderColor,\n          position: \"relative\",\n          marginLeft: \"0.1rem\",\n          marginRight: \"0.1rem\",\n          borderRadius: \"0.357rem !important\",\n          borderTopWidth: \"0px !important\",\n          padding: \"1rem 0.1rem\",\n          \"::before\": {\n            content: '\"\"',\n            backgroundColor: borderColor,\n            position: \"absolute\",\n            top: 0,\n            right: \"2px\",\n            width: `calc(${labelSize === 0 ? \"100%\" : `90% - ${labelSize}px`})`, // Replace labelSize with the actual value\n            height: \"0.7px\",\n          },\n          \"::after\": {\n            content: '\"\"',\n            backgroundColor: borderColor,\n            position: \"absolute\",\n            top: 0,\n            right: \"2px\",\n            width: \"20px\",\n            height: \"0.7px\",\n          },\n        }}\n      >\n        <span\n          style={{\n            position: \"absolute\",\n            top: \"-10px\",\n            right: \"10px\",\n            fontSize: \"80%\",\n            padding: \"0 13px\",\n            width: `calc(100px + ${labelSize}px)`,\n          }}\n        >\n          <KdpaTooltip title={label}>\n            <span>\n              {label.length > maxLength ? (\n                <>{label.substring(0, maxLength)} ...</>\n              ) : (\n                label\n              )}\n            </span>\n          </KdpaTooltip>\n        </span>\n        {expandable && (\n          <StyledDiv\n            sx={{\n              position: \"absolute\",\n              top: \"-8px\",\n              right: \"20px\",\n              fontSize: \"80%\",\n              padding: \"0 16px\",\n              width: \"20px\",\n              color: primaryColor,\n            }}\n          >\n            {isOpened ? (\n              <AiOutlineMinusCircle size={18} onClick={handleToggleSegment} />\n            ) : (\n              <AiOutlinePlusCircle size={18} onClick={handleToggleSegment} />\n            )}\n          </StyledDiv>\n        )}\n        <KdpaCollapse\n          in={expandable ? isOpened : true}\n          style={{ width: \"100%\" }}\n        >\n          <React.Fragment>{children}</React.Fragment>\n        </KdpaCollapse>\n      </KdpaGrid>\n    </KdpaGrid>\n  );\n}\n\nexport default KdpaSegment;\n",
    "meta": "{\n  elementType: \"KdpaSegment\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {\n    label: { type: \"static\", content: \"عنوان\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The HeaderField component is a customizable header field,\nthis component is wrapper of section element with title and can be seprate content in many segment.\nName Tag : KdSegment\nchildren element: any element\n\nstatic attrs:\n1- expandable: boolean\n2- defaultOpen: boolean\n\ndynamic attrs:\n1- label: string"
  },
  {
    "elementType": "HTML_EDITOR",
    "code": "import { EditorComponent, Remirror, useRemirror } from \"@remirror/react\";\nimport he from \"he\";\nimport Toolbar from \"./components/toolbar/Toolbar\";\nimport { editorExtentions } from \"./extentions\";\nimport { OnChangeHTML } from \"@remirror/react\";\n\nimport \"remirror/styles/all.css\";\nimport \"./KdHtmlEditor.scss\";\nimport FloatingToolbar from \"./components/toolbar/FloatingToolbar\";\nimport { htmlToProsemirrorNode } from \"remirror\";\nimport { CSSProperties } from \"react\";\n\nexport type ToolbarButton =\n  | \"BOLD\"\n  | \"ITALIC\"\n  | \"UNDERLINE\"\n  | \"STRIKETHROUGH\"\n  | \"BULLET_LIST\"\n  | \"ORDERED_LIST\"\n  | \"TASK_LIST\"\n  | \"RIGHT_ALIGN\"\n  | \"CENTER_ALIGN\"\n  | \"LEFT_ALIGN\";\n\nexport interface KdHtmlEditorProps {\n  onChange?: (htmlValueString: string) => void;\n  defaultValue?: string;\n  style?: CSSProperties;\n  toolbar?: ToolbarButton[];\n  [key: string]: unknown;\n}\n\nconst KdHtmlEditor = ({\n  onChange,\n  defaultValue,\n  style,\n  toolbar = [\n    \"BOLD\",\n    \"ITALIC\",\n    \"UNDERLINE\",\n    \"STRIKETHROUGH\",\n    \"BULLET_LIST\",\n    \"ORDERED_LIST\",\n    \"TASK_LIST\",\n    \"RIGHT_ALIGN\",\n    \"CENTER_ALIGN\",\n    \"LEFT_ALIGN\",\n  ],\n  ...props\n}: KdHtmlEditorProps) => {\n  const { manager, state } = useRemirror({\n    extensions: editorExtentions,\n    selection: \"start\",\n  });\n\n  const doc = htmlToProsemirrorNode({\n    content: he.unescape(defaultValue ?? \"\"),\n    schema: state.schema,\n  });\n\n  return (\n    <div style={{ height: \"300px\", ...style }} {...props}>\n      <div className={`remirror-theme kd-editor`}>\n        <Remirror manager={manager} initialContent={doc}>\n          <Toolbar toolbar={toolbar} />\n          <EditorComponent />\n          <FloatingToolbar />\n          <OnChangeHTML\n            onChange={(html: string) => {\n              if (onChange) onChange(he.escape(html));\n            }}\n          />\n        </Remirror>\n      </div>\n    </div>\n  );\n};\n\nexport default KdHtmlEditor;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    placeholder: { type: \"static\", content: \"بنویسید...\" },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdHtmlEditor\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The HtmlEditor component is Box input that user can be write html code in it.\nName Tag : KdHtmlEditor\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- placeholder: string\n\ndynamic attrs:\n1- defaultValue: string"
  },
  {
    "elementType": "HYPER_LINK",
    "code": null,
    "meta": "{\n    elementType: \"a\",\n    children: [],\n    parentId: \"\",\n    style: {},\n    attrs: {},\n  }",
    "description": "The HyperLink component is a simple customizable hyperlink,\nthis component used instead of <a></a> or any Link tag in the application.\nName Tag : Link\nchildren element: any element\n\nstatic attrs: \n1- target: default | _blank\n\ndynamic attrs:\n1- title: string\n2- href: string"
  },
  {
    "elementType": "ICON",
    "code": null,
    "meta": "{\n  elementType: \"KdStyledComponent\",\n  selfClosing: true,\n  style: {},\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"FiPlus\",\n        type: \"package\",\n        version: \"latest\",\n        path: `react-icons/fi`,\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n    size: { type: \"static\", content: \"40\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Icon is component can used only for icon react-icons library.\nand anywhere user want to use icon in the application only need to use this component and icons in react-icons library.\nName Tag : like <MdOutlineHomeIcon /> or <FiClose /> or ... of react-icons library\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- color: string\n2- size: number\n\ndynamic attrs:\n1- title: string"
  },
  {
    "elementType": "ICON_BUTTON",
    "code": "import React, { ReactNode } from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { KdpaTooltip } from \"../../Tooltips\";\n\nexport interface KdpaIconButtonProps {\n  icon?: ReactNode;\n  tooltipText?: string;\n  disabled?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  children?: ReactNode;\n  [x: string]: any;\n}\n\nfunction KdpaIconButton({\n  icon,\n  tooltipText = \"\",\n  placement = \"top\",\n  ...props\n}: KdpaIconButtonProps) {\n  const { disabled, onClick, children, ...restOfProps } = props;\n\n  const IconButtonContent = (\n    <IconButton disabled={disabled ?? false} onClick={onClick} {...restOfProps}>\n      {children ? children : icon}\n    </IconButton>\n  );\n\n  return tooltipText ? (\n    <KdpaTooltip title={tooltipText} placement={placement}>\n      {IconButtonContent}\n    </KdpaTooltip>\n  ) : (\n    IconButtonContent\n  );\n}\n\nexport default KdpaIconButton;\n",
    "meta": "{\n  elementType: \"KdpaIconButton\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"50px\" },\n    height: { type: \"static\", content: \"50px\" },\n  },\n  attrs: {},\n  innerChildren: [\n    {\n      type: \"element\",\n      content: {\n        elementType: \"KdStyledComponent\",\n        selfClosing: true,\n        style: {},\n        attrs: {\n          Component: {\n            type: \"import\",\n            content: {\n              id: \"FiPlus\",\n              type: \"package\",\n              version: \"latest\",\n              path: `react-icons/fi`,\n              meta: {\n                namedImport: true,\n              },\n            },\n          },\n          size: { type: \"static\", content: \"40\" },\n        },\n        dependency: {\n          type: \"package\",\n          version: \"latest\",\n          path: \"kdpa-components\",\n          meta: {\n            namedImport: true,\n          },\n        },\n      },\n    },\n  ],\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The IconButton component is mui button with icon, this component is simple and user can be use it in the application.\nthe icon of this component is from react-icons library and Icon element.\nName Tag : KdpaIconButton\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- icon: ICON element like <MdOutlineHomeIcon /> or <FiClose /> or ... of react-icons library \n\ndynamic attrs:\n1- title: string"
  },
  {
    "elementType": "IMAGE_BOX",
    "code": "import React, { useEffect, useState } from \"react\";\nimport { BsImage } from \"react-icons/bs\";\nimport ModalImage, { ModalImageProps } from \"react-modal-image\";\nimport { KdpaMuiBadge } from \"../../../components\";\n\nimport { styled } from \"@mui/system\";\nimport ImageZoom from \"./ImageZoom\";\n\nconst StyledImage = styled(\"img\")();\nconst StyledDiv = styled(\"div\")();\nconst StyledModalImage = styled(ModalImage)();\n\n//@ts-ignore\nexport interface KdImageBoxProps extends Partial<ModalImageProps> {\n  src?: string | string[];\n  basePath?: {\n    basePathStream?: string;\n    basePathThumbnail?: string;\n  };\n  modal?: boolean;\n\n  zoomable?: boolean;\n  quality?: \"LOW\" | \"HIGH\";\n  sx?: any;\n}\n\nconst KdImageBox = ({\n  src,\n  quality = \"LOW\",\n  zoomable,\n  loading = \"lazy\",\n  ...props\n}: KdImageBoxProps) => {\n  const [srcItem, setSrcItem] = useState<string>();\n\n  useEffect(() => {\n    if (src === undefined) setSrcItem(undefined);\n    else {\n      if (Array.isArray(src)) setSrcItem(src[0]);\n      else setSrcItem(src);\n    }\n  }, [src]);\n\n  const BadgeWrapper = (props: any) => {\n    if (Array.isArray(src))\n      return (\n        <KdpaMuiBadge\n          overlap={\"circular\"}\n          badgeContent={src.length}\n          color={\"primary\"}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"right\",\n          }}\n        >\n          {props.children}\n        </KdpaMuiBadge>\n      );\n    else return <>{props.children}</>;\n  };\n\n  const handleUrlImage = (size: \"small\" | \"large\"): string => {\n    if (size === \"small\") {\n      if (props.basePath?.basePathThumbnail)\n        return props.basePath?.basePathThumbnail + srcItem;\n      else return srcItem as string;\n    } else {\n      if (props.basePath?.basePathStream)\n        return props.basePath?.basePathStream + srcItem;\n      else return srcItem as string;\n    }\n  };\n\n  return srcItem ? (\n    <BadgeWrapper>\n      {props.modal === true ? (\n        <StyledModalImage\n          {...props}\n          loading={loading}\n          small={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n          medium={handleUrlImage(\"large\")}\n          large={handleUrlImage(\"large\")}\n          hideZoom\n        />\n      ) : zoomable === true ? (\n        <ImageZoom\n          {...props}\n          src={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n        />\n      ) : (\n        <StyledImage\n          {...props}\n          loading={loading}\n          onError={(event) => {\n            //@ts-ignore\n            event.onerror = null;\n            //@ts-ignore\n            if ((event?.target?.src ?? \"\").endsWith(handleUrlImage(\"small\")))\n              return;\n            //@ts-ignore\n            event.target.src = handleUrlImage(\"small\");\n          }}\n          src={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n        />\n      )}\n    </BadgeWrapper>\n  ) : (\n    <StyledDiv sx={{ ...props?.style, ...props?.sx }}>\n      <BsImage style={{ color: \"gray\", height: \"100%\", width: \"100%\" }} />\n    </StyledDiv>\n  );\n};\n\nexport default KdImageBox;\n",
    "meta": "{\n  elementType: \"KdImageBox\",\n  children: [],\n  parentId: \"\",\n  style: {\n    height: { type: \"static\", content: \"70px\" },\n    width: { type: \"static\", content: \"70px\" },\n  },\n  attrs: {\n    modal: { type: \"static\", content: false },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The ImageBox component is a simple customizable image box,\nthis component used instead of <img></img> tag in the application.\nName Tag : KdImageBox\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- modal: boolean\n2- alt: string\n3- quality: LOW | HIGH\n4- loading: lazy | eager\n\ndynamic attrs:\n1- title: string\n2- src: string"
  },
  {
    "elementType": "LAYOUT",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    container: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Layout component is a simple customizable layout,\nit used Grid component from MUI to create a layout in the application.\nand can be used xs (extra small), sm (small), md (medium), lg (large), xl (extra large) screen sizes.\nand only used Element LayoutRow in children. attr container, default is true and can not be change\nName Tag : KdpaGrid\nchildren element: layout row"
  },
  {
    "elementType": "LAYOUT_CELL",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    item: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The LayoutCell component is a simple customizable layout,\nit used Grid component from MUI to create a layout in the application.\nand can be used xs (extra small), sm (small), md (medium), lg (large), xl (extra large) screen sizes.attr item, default is true and can not be change\nName Tag : KdpaGrid\nchildren element: any element\n\nstatic attrs:\n1- xs: number\n2- sm: number\n3- md: number\n4- lg: number\n"
  },
  {
    "elementType": "LAYOUT_ROW",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    container: {\n      type: \"static\",\n      content: true,\n    },\n    item: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The LayoutRow component is a simple customizable layout,\nit used Grid component from MUI to create a layout in the application.\nand can be used xs (extra small), sm (small), md (medium), lg (large), xl (extra large) screen sizes.\nand only used Element LayoutCell in children.attr container and item, default is true and can not be change. always xs is 12\nName Tag : KdpaGrid\nchildren element: layout cell"
  },
  {
    "elementType": "LOADING",
    "code": "import { useMemo } from \"react\";\nimport { useTheme } from \"@mui/material\";\n\nimport * as Components from \"./components\";\nimport { KdStyledComponent } from \"../StyledComponent\";\n\nexport type KdLoadingProps = {\n  type?: keyof typeof Components;\n  color?: string;\n  [key: string]: any;\n};\n\nfunction KdLoading({ type = \"ClipLoader\", color, ...props }: KdLoadingProps) {\n  const theme = useTheme();\n  const Component = useMemo(() => Components[type], [type]);\n\n  const colorProp = color || props?.sx?.color || theme.palette.primary.main;\n\n  // Resolve the color from the theme\n  const resolvedColor = colorProp?.includes(\".\")\n    ? colorProp\n        .split(\".\")\n        .reduce((acc: any, key: any) => acc?.[key], theme.palette)\n    : colorProp;\n\n  return (\n    <KdStyledComponent\n      Component={Component}\n      {...props}\n      //@ts-ignore\n      color={resolvedColor}\n    />\n  );\n}\n\nexport default KdLoading;\n",
    "meta": "{\n  elementType: \"KdLoading\",\n  children: [],\n  parentId: \"\",\n  selfClosing: true,\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Loading component is a customizable loading built on top of MUI's CircularProgress component,\nit can be use to show loading in the page.\nName Tag : KdLoading\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- type: ClipLoader | BarLoader | BeatLoader | CircleLoader | DotLoader | MoonLoader | PulseLoader | PuffLoader | RingLoader | ScaleLoader | SyncLoader | FadeLoader\n2- size: number\n3- width: string (like 10px)\n4- color: string"
  },
  {
    "elementType": "MENU",
    "code": "import React, { ComponentType } from \"react\";\nimport * as Menubar from \"@radix-ui/react-menubar\";\nimport { MenubarProps } from \"@radix-ui/react-menubar\";\nimport { FaChevronLeft, FaChevronDown } from \"react-icons/fa\";\nimport \"./KdMenubar.scss\";\nimport { BuildMenubarType, useMenubarHelper } from \"./useMenubarHelper\";\n\nexport interface KdMenubarProps extends MenubarProps {\n  data: unknown[];\n  onClick?: (...$args: any[]) => void;\n  orientation?: \"vertical\" | \"horizontal\";\n  getOptionLabel?: ((data: any) => string) | undefined;\n  getOptionValue?: ((data: any) => string) | undefined;\n  getOptionParent?: ((data: any) => string) | undefined;\n  getOptionNavlink?: ((data: any) => string) | undefined;\n  getOptionExternalLink?: ((data: any) => boolean) | undefined;\n  LinkComponent?: ComponentType<any>; // Add LinkComponent prop\n  noDataText?: string;\n}\n\nconst KdMenubar = ({\n  data,\n  onClick,\n  orientation = \"horizontal\",\n  getOptionValue,\n  getOptionLabel,\n  getOptionParent,\n  getOptionNavlink,\n  getOptionExternalLink,\n  noDataText = \"no data\",\n  LinkComponent,\n  ...props\n}: KdMenubarProps) => {\n  const { buildMenubar, renderMenubarToSpecificFieldName } = useMenubarHelper();\n  const MenuData = buildMenubar(\n    renderMenubarToSpecificFieldName({\n      data,\n      getOptionLabel,\n      getOptionValue,\n      getOptionParent,\n      getOptionNavlink,\n      getOptionExternalLink,\n    })\n  );\n\n  const MenubarMenu = ({ data }: { data: BuildMenubarType }) => {\n    return (\n      <Menubar.Menu>\n        <Menubar.Trigger className=\"MenubarTrigger\">\n          {data.label}\n          <div className=\"LeftMainSlot\">\n            <FaChevronDown size={10} />\n          </div>\n        </Menubar.Trigger>\n        <Menubar.Portal>\n          <Menubar.Content\n            className=\"MenubarContent\"\n            align={\"start\"}\n            side={orientation === \"horizontal\" ? \"bottom\" : \"right\"}\n            sideOffset={5}\n          >\n            {(data.children ?? []).map((child: BuildMenubarType) => {\n              if (child.children && child.children.length > 0)\n                return <MenubarSub data={child} />;\n              else return <MenubarItem data={child} />;\n            })}\n          </Menubar.Content>\n        </Menubar.Portal>\n      </Menubar.Menu>\n    );\n  };\n\n  const MenubarItem = ({ data }: { data: BuildMenubarType }) => {\n    // comming soon add Link tag from react router dom\n    const TagName =\n      onClick || !data.navlink\n        ? \"span\"\n        : data.externalLink\n        ? \"a\"\n        : LinkComponent || \"a\";\n    const TagProp = onClick\n      ? {\n          onClick: () => {\n            onClick(data);\n          },\n        }\n      : data.externalLink || !LinkComponent\n      ? { href: data.navlink }\n      : { to: data.navlink }; // use \"to\" prop for LinkComponent\n\n    return (\n      <TagName className=\"MenubarItem MenubarTriggerText\" {...TagProp}>\n        {data.label}\n      </TagName>\n    );\n  };\n\n  const MenubarSub = ({ data }: { data: BuildMenubarType }) => {\n    return (\n      <Menubar.Sub>\n        <Menubar.SubTrigger className=\"MenubarSubTrigger\">\n          <span className=\"MenubarTriggerText\">{data.label}</span>\n          <div className=\"LeftSlot\">\n            <FaChevronLeft size={10} />\n          </div>\n        </Menubar.SubTrigger>\n        <Menubar.Portal>\n          <Menubar.SubContent\n            className=\"MenubarSubContent\"\n            alignOffset={-5}\n            sideOffset={10}\n          >\n            {(data.children ?? []).map((child: any) => {\n              if (child.children && child.children.length > 0)\n                return <MenubarSub data={child} />;\n              else return <MenubarItem data={child} />;\n            })}\n          </Menubar.SubContent>\n        </Menubar.Portal>\n      </Menubar.Sub>\n    );\n  };\n\n  return (\n    <>\n      {MenuData.length > 0 ? (\n        <Menubar.Root\n          {...props}\n          className=\"MenubarRoot\"\n          dir=\"rtl\"\n          style={{\n            flexDirection: orientation === \"horizontal\" ? \"unset\" : \"column\",\n            ...props.style,\n          }}\n        >\n          {MenuData.map((child) => (\n            <MenubarMenu data={child} {...props} />\n          ))}\n        </Menubar.Root>\n      ) : (\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>{noDataText}</div>\n      )}\n    </>\n  );\n};\n\nexport default KdMenubar;\n",
    "meta": "{\n  elementType: \"KdMenubar\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Menu component is a customizable menu built on top of @radix-ui/react-menubar's Menu component,\nit can be use to show menu in the page.\nand data is attibute not children element.\nName Tag : KdMenubar\nchildren element: not have children element and self closing element\n\ndynamic attrs:\n1- data: list of { label: string, value: string, parent: string } "
  },
  {
    "elementType": "MODAL",
    "code": "import React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport Dialog, { DialogProps } from \"@mui/material/Dialog\";\nimport { BsX } from \"react-icons/bs\";\n\nexport interface KdModalProps extends Omit<DialogProps, \"open\"> {\n  title?: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  isOpen: boolean;\n  hasHeader?: boolean;\n  backdropClick?: boolean;\n  [x: string]: any;\n}\n\nfunction KdModal({\n  title,\n  children,\n  onClose,\n  isOpen,\n  fullWidth = true,\n  hasHeader = true,\n  backdropClick = true,\n  ...props\n}: KdModalProps) {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(e, reason) => {\n        if (reason === \"backdropClick\" && !backdropClick) {\n          return;\n        }\n        onClose?.();\n      }}\n      fullWidth={fullWidth}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      {...props}\n      sx={{\n        \"& .MuiDialog-paper\": {\n          padding: \"20px\",\n          ...props?.sx,\n        },\n      }}\n    >\n      {hasHeader && (\n        <DialogTitle\n          id=\"alert-dialog-title\"\n          variant=\"body1\"\n          sx={{\n            display: \"flex\",\n            padding: \"0px !important\",\n            paddingBottom: \"20px !important\",\n            fontSize: \"16px\",\n            fontWeight: 600,\n            paddingLeft: \"16px\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <span>{title}</span>\n\n          <IconButton onClick={onClose}>\n            <BsX />\n          </IconButton>\n        </DialogTitle>\n      )}\n\n      <DialogContent sx={{ padding: \"1px\" }}>{children}</DialogContent>\n    </Dialog>\n  );\n}\n\nexport default KdModal;\n",
    "meta": "{\n  elementType: \"KdModal\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Modal component is a customizable modal built on top of MUI's Dialog component,\nit can be use to show a modal in the page.\nName Tag : KdModal\nchildren element: any element\n\nstatic attrs:\n1- fullScreen: boolean\n2- fullWidth: boolean\n3- maxWidth: xs | sm | md | lg | xl\n\ndynamic attrs:\n1- open: boolean"
  },
  {
    "elementType": "MULTI_FILE_BROWSER",
    "code": "import { ChangeEvent, useCallback, useEffect, useState } from \"react\";\nimport { Box, IconButton } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport { SlCloudUpload } from \"react-icons/sl\";\nimport { KdpaCollapseTransitions } from \"../../../../components/Transitions\";\nimport { TypeAcceptUploader } from \"../KdFileUploader/KdFileUploader\";\nimport { getFileExtensions } from \"./componentHelper\";\nimport {\n  KdpaTypography,\n  KdpaUploadedFile,\n  KdpaUploadingFile,\n  KdpaUseFileUploadHook,\n} from \"../../../../components/index\";\nimport { fetchFilesProperty, urlCreator } from \"../../../utils/sharedUtils\";\n\nexport interface KdAdvanceFileUploaderProps {\n  label?: string;\n  multiple?: boolean;\n  required?: boolean;\n  fileSizeLimit?: number;\n  fileCountLimit?: number;\n  onError: (message: string) => void;\n  pathProp: {\n    APIURL: string;\n    sessionId?: string;\n  };\n  defaultValue?: string[] | string;\n  accept?: TypeAcceptUploader;\n  downloadSmallSize?: boolean;\n  [x: string]: any;\n}\n\nconst KdAdvanceFileUploader = ({\n  label = \"فایل(ها) را در این جعبه رها کنید، یا روی جعبه کلیک کنید\",\n  defaultValue,\n  multiple = false,\n  accept,\n  fileCountLimit = 20,\n  fileSizeLimit,\n  onError,\n  required,\n  pathProp,\n  downloadSmallSize,\n  ...props\n}: KdAdvanceFileUploaderProps) => {\n  const {\n    files: tempFilesUploaded,\n    removeFile,\n    uploadingFiles,\n    handleFileChange,\n    fileExtension,\n    APIURL,\n  } = KdpaUseFileUploadHook({\n    multiple,\n    APIURL: pathProp?.APIURL,\n    sessionId: pathProp?.sessionId,\n    onError: onError,\n    fileSizeLimit: fileSizeLimit,\n    fileCountLimit: fileCountLimit,\n  });\n\n  const [value, setValue] = useState<{ fileName?: string; session: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (props?.value === null && value.length > 0) {\n      value.forEach((item) => removeFile(item.session));\n      setValue([]);\n    }\n  }, [props?.value]);\n  // first render for check default value\n  useEffect(() => {\n    const fetchAndSetFileProperties = async () => {\n      if (defaultValue) {\n        const defaultSessions = Array.isArray(defaultValue)\n          ? [...defaultValue]\n          : [defaultValue];\n        const data = await fetchFilesProperty(\n          APIURL,\n          defaultSessions,\n          pathProp?.sessionId\n        );\n\n        setValue(\n          defaultSessions.map((session) => ({\n            fileName: (data ?? []).find((el: any) => el.guid === session)\n              ?.fileName,\n            session: session,\n          }))\n        );\n      } else {\n        setValue([]);\n      }\n    };\n\n    fetchAndSetFileProperties();\n  }, [defaultValue]);\n\n  // handle uploaded file\n  useEffect(() => {\n    if (tempFilesUploaded) {\n      if (multiple)\n        setValue((old) => [\n          ...old,\n          ...(tempFilesUploaded\n            .filter((file) => !value.find((el) => el.session === file.session))\n            .map((file) => ({\n              fileName: file.fileName,\n              session: file.session,\n            })) ?? []),\n        ]);\n      else if (tempFilesUploaded.length > 0)\n        setValue([\n          {\n            fileName: tempFilesUploaded[0]?.fileName,\n            session: tempFilesUploaded[0]?.session,\n          },\n        ]);\n    }\n  }, [tempFilesUploaded]);\n\n  // all changes in files value should be apply to onChange form and set value form\n  useEffect(() => {\n    if (props.onChange) {\n      if (multiple) props.onChange((value ?? []).map((item) => item.session));\n      else if (value.length > 0)\n        props.onChange(value[value.length - 1].session);\n      else props.onChange();\n    }\n  }, [value]);\n\n  const onDrop = useCallback(\n    (comingFiles: any) => {\n      const syntheticEvent: ChangeEvent<\n        HTMLInputElement & { target: EventTarget & { files: FileList } }\n      > = {\n        //@ts-ignore\n        target: {\n          files: comingFiles,\n        },\n      };\n\n      if (comingFiles.length + value.length > fileCountLimit) {\n        onError?.(`حداکثر ${fileCountLimit} فایل می‌توانید بارگذاری کنید.`);\n        return;\n      } else handleFileChange(syntheticEvent, accept);\n    },\n    [value]\n  );\n\n  const onDelete = (session: string) => {\n    setValue((old) => old.filter((value) => value.session !== session));\n    if (\n      tempFilesUploaded?.find((item) => item.session === session) &&\n      removeFile\n    )\n      removeFile(session);\n  };\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject,\n    open,\n    inputRef,\n  } = useDropzone({\n    onDropAccepted: onDrop,\n    accept: accept\n      ? getFileExtensions(accept, fileExtension ?? null)\n      : undefined,\n    maxFiles: 9999,\n    noClick: true,\n    multiple: multiple,\n    disabled: props?.disabled,\n  });\n\n  // this section for ctrl + v (paste)\n  useEffect(() => {\n    if (!inputRef.current) return;\n\n    const handlePasteFile = async (event: ClipboardEvent) => {\n      const files = event.clipboardData?.files;\n\n      if (files && files.length > 0) {\n        // Optionally, you can trigger your input's change event\n        if (inputRef.current) {\n          inputRef.current.files = files;\n          inputRef.current.dispatchEvent(\n            new Event(\"change\", { bubbles: true })\n          );\n        }\n      }\n    };\n\n    document.addEventListener(\"paste\", handlePasteFile);\n\n    return () => {\n      document.removeEventListener(\"paste\", handlePasteFile);\n    };\n  }, [inputRef]);\n\n  return (\n    <Box>\n      <Box\n        component={\"section\"}\n        sx={{\n          // p: 2,\n          mb: 1,\n          border: 2,\n          borderStyle: \"dashed\",\n          borderRadius: 3,\n          borderColor: (theme) => theme.palette.primary.main,\n          transition: \"all 0.3s ease-in-ease-out\",\n          ...(isDragAccept && {\n            borderColor: (theme) => theme.palette.success.main,\n          }),\n          ...(isDragAccept && {\n            bgcolor: (theme) => theme.palette.success.light,\n          }),\n          ...(isDragReject && {\n            borderColor: (theme) => theme.palette.warning.main,\n          }),\n          ...(isDragReject && {\n            bgcolor: (theme) => theme.palette.warning.light,\n          }),\n          ...props.sx,\n        }}\n        {...getRootProps()}\n      >\n        <input\n          {...getInputProps()}\n          {...(props[\"aria-id\"] && { \"aria-id\": props[\"aria-id\"] })}\n        />\n        <Box\n          sx={{\n            p: 2,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <KdpaTypography sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            {label} {required && \"*\"}\n          </KdpaTypography>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            <IconButton\n              sx={{\n                color: (theme) => theme.palette.primary.main,\n                ...(isDragAccept && {\n                  color: (theme) => theme.palette.success.main,\n                }),\n                ...(isDragReject && {\n                  color: (theme) => theme.palette.warning.main,\n                }),\n                ...(props?.disabled && { opacity: \"0.5\" }),\n              }}\n              onClick={open}\n            >\n              <SlCloudUpload size={45} />\n            </IconButton>\n          </Box>\n          <KdpaCollapseTransitions\n            in={value?.length !== 0 || uploadingFiles?.length !== 0}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                gap: \"10px\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              {value &&\n                value.map((item) => {\n                  const url = urlCreator(APIURL, item.session);\n\n                  return (\n                    <KdpaUploadedFile\n                      sessionId={item.session}\n                      smallUrl={url.thumbnail_URL}\n                      largeUrl={url.larg_URL}\n                      fileName={item.fileName}\n                      onDelete={props.disabled ? undefined : onDelete}\n                      downloadSmallSize={downloadSmallSize}\n                      modal={true}\n                      extention={item.fileName?.split(\".\").pop()}\n                    />\n                  );\n                })}\n              {uploadingFiles &&\n                (multiple || value.length === 0) &&\n                uploadingFiles.map((item) => {\n                  return <KdpaUploadingFile progress={item.progress} />;\n                })}\n            </div>\n          </KdpaCollapseTransitions>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default KdAdvanceFileUploader;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    accept: {\n      type: \"static\",\n      content: { image: \"ALL\", text: \"ALL\", compress: \"ALL\", video: \"ALL\" },\n    },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdAdvanceFileUploader\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The MultiFileBrowser component is a advance customizable file browser ,\nand user can upload multiple files and drag and drop files in the file browser.\nName Tag : KdAdvanceFileBrowser\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- fileSizeLimit: number\n3- accept: list of (image | video | text | compress)\n3- multiple: boolean\n\ndynamic attrs:\n1- defaultValue: string"
  },
  {
    "elementType": "PIE_CHART",
    "code": "import { GenerateDataChart2D } from \"./KdChart2DHelper\";\nimport KdChart, { KdChartProps } from \"../KdChart/KdChart\";\n\nexport type KdChart2DProps = KdChartProps & {\n  data?: { [key: string]: unknown }[];\n  groupBy?: string;\n  valueBy?: string;\n};\n\nconst KdChart2D = ({\n  data = [],\n  groupBy = \"\",\n  valueBy = \"\",\n  ...props\n}: KdChart2DProps) => {\n  const { series, uniqueCategoryArray } = GenerateDataChart2D(\n    data,\n    groupBy,\n    valueBy\n  );\n  return (\n    <KdChart\n      noDataText={data.length === 0 ? \"بدون داده\" : \"داده های شما سازگار نیست\"}\n      series={series}\n      labels={(uniqueCategoryArray as string[]) ?? []}\n      {...props}\n    />\n  );\n};\n\nexport default KdChart2D;\n",
    "meta": "{\n  elementType: \"KdChart2D\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"donut\" },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: { namedImport: true },\n  },\n}",
    "description": "The PiChart component is a customizable 2D chart built on top of ApexCharts,\nthis chart in 2D and can use it to show data in 2D.\nName Tag : KdChart2D\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- titleText: string\n2- xaxisTitle: string\n3- yaxisTitle: string\n4- type: donut | radialBar | pie | polarArea\n\ndynamic attrs:\n1- data: list of { group: string, value: string}"
  },
  {
    "elementType": "RADIO_LIST",
    "code": "import React, { forwardRef } from \"react\";\nimport { RadioGroup, RadioGroupProps } from \"@mui/material\";\n\nexport type KdpaRadioGroupPorps = RadioGroupProps;\n\nfunction KdpaRadioGroup(props: KdpaRadioGroupPorps) {\n  return <RadioGroup {...props}>{props.children}</RadioGroup>;\n}\n\nexport default KdpaRadioGroup;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaRadioGroup\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The RadioList component is a customizable radio list built on top of MUI's RadioGroup component,\nit can be use to select one item from a list of items.\nName Tag : KdpaRadioList\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n\ndynamic attrs:\n1- title: string\n2- defaultValue: {id:string , label: string}\n3- options: list of {id:string , label: string}"
  },
  {
    "elementType": "STEPER_CONTAINER",
    "code": "import React, { HTMLAttributes, useEffect } from \"react\";\nimport \"./KdStepRoot.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\n\nexport interface KdStepRootProps extends HTMLAttributes<HTMLDivElement> {\n  currentStep: number;\n  setCurrentStep: (value: number) => void;\n  defaultValue?: string | number;\n  children: React.ReactNode[];\n  orientation?: \"vertical\" | \"horizontal\";\n  clickSteps?: boolean;\n  showConnector?: boolean;\n}\n\nfunction KdStepRoot({\n  currentStep,\n  setCurrentStep,\n  defaultValue,\n  children,\n  orientation = \"horizontal\",\n  clickSteps = false,\n  showConnector = true,\n  ...props\n}: KdStepRootProps) {\n  useEffect(() => {\n    if (defaultValue) {\n      if (typeof defaultValue === \"string\")\n        setCurrentStep(parseInt(defaultValue));\n      else setCurrentStep(defaultValue);\n    }\n  }, [defaultValue]);\n  return (\n    <StyledDiv\n      {...props}\n      className={`${props.className} KdStepRoot ${\n        orientation === \"vertical\"\n          ? \"KdStepRoot_vertical\"\n          : \"KdStepRoot_horizontal\"\n      }`}\n    >\n      {children.map((item, index) => {\n        return React.isValidElement(item)\n          ? React.cloneElement(item as React.ReactElement, {\n              orientation,\n              currentStep,\n              setCurrentStep,\n              clickSteps,\n              showConnector,\n              key: index,\n            })\n          : item;\n      })}\n    </StyledDiv>\n  );\n}\n\nexport default KdStepRoot;\n",
    "meta": "{\n  elementType: \"KdStepRoot\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The StepperContainer component is a customizable stepper container built on top of MUI's Stepper component,\nit can be use to show a stepper in the page.\nand only can used StepperElement component as children.\nName Tag : KdStepperContainer\nchildren element: StepperElement"
  },
  {
    "elementType": "STEPER_ELEMENT",
    "code": "import React from \"react\";\nimport Stepper, { StepperProps } from \"@mui/material/Stepper\";\nimport { Step, StepConnector } from \"@mui/material\";\nimport \"./KdStepList.scss\";\n\nexport interface KdStepListProps extends StepperProps {\n  children: React.ReactNode[];\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  clickSteps?: boolean;\n  showConnector?: boolean;\n}\nfunction KdStepList({\n  children,\n  currentStep,\n  setCurrentStep,\n  orientation = \"horizontal\",\n  clickSteps = true,\n  showConnector = true,\n  ...props\n}: KdStepListProps) {\n  return (\n    <Stepper\n      activeStep={currentStep}\n      orientation={orientation}\n      {...props}\n      connector={\n        <StepConnector\n          sx={{ visibility: showConnector ? \"visible\" : \"hidden\" }}\n        />\n      }\n      sx={{\n        ...props.sx,\n        \".MuiStepConnector-lineVertical\": {\n          height: \"100%\",\n        },\n      }}\n      className={`${props.className} ${\n        orientation === \"vertical\"\n          ? \"KdStepper_vertical\"\n          : \"KdStepper_horizontal\"\n      }`}\n    >\n      {children.map((child, index) => {\n        if (child)\n          return (\n            <Step\n              active={currentStep === index}\n              completed={\n                currentStep !== undefined ? currentStep > index : false\n              }\n            >\n              {React.isValidElement(child)\n                ? React.cloneElement(child as React.ReactElement, {\n                    orientation,\n                    currentStep,\n                    setCurrentStep,\n                    clickSteps,\n                    key: index,\n                  })\n                : child}\n            </Step>\n          );\n      })}\n    </Stepper>\n  );\n}\n\nexport default KdStepList;\n\nimport { HTMLAttributes } from \"react\";\nimport { KdpaPrimaryButton } from \"../../../../components\";\nimport \"./KdStepContent.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\n\nexport interface KdStepContentProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  footer?: boolean;\n  backButtonText?: string;\n  nextButtonText?: string;\n  index?: number;\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  onPrev?: () => void;\n  onNext?: () => void;\n  orientation?: \"vertical\" | \"horizontal\";\n}\n\nfunction KdStepContent({\n  children,\n  footer = false,\n  backButtonText = \"قبلی\",\n  nextButtonText = \"بعدی\",\n  index,\n  currentStep,\n  setCurrentStep,\n  onPrev,\n  onNext,\n  orientation = \"horizontal\",\n  ...props\n}: KdStepContentProps) {\n  const handleNext = () => {\n    if (setCurrentStep && currentStep !== undefined)\n      setCurrentStep(currentStep + 1);\n  };\n\n  const handleBack = () => {\n    if (setCurrentStep && currentStep !== undefined)\n      setCurrentStep(currentStep - 1);\n  };\n\n  if (currentStep === index)\n    return (\n      <StyledDiv\n        className={\n          orientation === \"horizontal\"\n            ? \"KdStepContent_horizontal\"\n            : \"KdStepContent_vertical\"\n        }\n        {...props}\n      >\n        <div>{children}</div>\n        {footer && (\n          <div className=\"KdStepContent_Buttons\">\n            <KdpaPrimaryButton\n              disabled={currentStep === 0}\n              onClick={() => {\n                if (onPrev) onPrev();\n                else handleBack();\n              }}\n            >\n              {backButtonText}\n            </KdpaPrimaryButton>\n            <KdpaPrimaryButton\n              variant=\"contained\"\n              onClick={() => {\n                if (onNext) onNext();\n                else handleNext();\n              }}\n            >\n              {nextButtonText}\n            </KdpaPrimaryButton>\n          </div>\n        )}\n      </StyledDiv>\n    );\n  else return <></>;\n}\n\nexport default KdStepContent;\n\nimport { useTheme } from \"@mui/material\";\nimport StepLabel, { StepLabelProps } from \"@mui/material/StepLabel\";\nimport \"./KdStepTrigger.scss\";\nexport interface KdStepTriggerProps extends StepLabelProps {\n  index: number;\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  clickSteps?: boolean;\n  icon?: React.ReactNode;\n  completedIcon?: React.ReactNode;\n  activeIcon?: React.ReactNode;\n}\n\nfunction KdStepTrigger({\n  children,\n  index,\n  currentStep = 0,\n  setCurrentStep,\n  clickSteps = true,\n  icon,\n  completedIcon,\n  activeIcon,\n  ...props\n}: KdStepTriggerProps) {\n  const handleStep = (step: number) => {\n    if (setCurrentStep) setCurrentStep(step);\n  };\n\n  const theme = useTheme();\n\n  function getIcon() {\n    if (currentStep === index) {\n      return activeIcon ?? completedIcon ?? icon;\n    } else if (currentStep > index) {\n      return completedIcon ?? icon;\n    } else {\n      return icon;\n    }\n  }\n  return (\n    <StepLabel\n      onClick={() => {\n        if (clickSteps) handleStep(index);\n      }}\n      {...props}\n      icon={getIcon()}\n      className=\"KdStepLabel\"\n      style={\n        {\n          ...props?.style,\n          \"--primary-main\": theme.palette.primary.main,\n        } as React.CSSProperties\n      }\n    >\n      {children}\n    </StepLabel>\n  );\n}\n\nexport default KdStepTrigger;\n",
    "meta": "{\n  elementType: \"KdStepContent\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The StepperElement component is a customizable stepper element built on top of MUI's Step component,\nthis component is for each step in the StepperContainer component.\nName Tag : KdStepperElement\nchildren element: any element\n\nstatic attrs: \n1- label: string"
  },
  {
    "elementType": "SWITCH",
    "code": "import React from \"react\";\nimport Switch, { SwitchProps } from \"@mui/material/Switch\";\n\nexport type KdpaSwitchProps = SwitchProps;\n\nconst KdpaSwitch = React.forwardRef<HTMLInputElement, KdpaSwitchProps>(\n  (props, ref) => {\n    return (\n      <Switch\n        color=\"primary\"\n        inputRef={ref}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        {...props}\n      />\n    );\n  }\n);\nexport default KdpaSwitch;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    defaultChecked: { type: \"static\", content: true },\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaFormControlLabel\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            control: {\n              type: \"element\",\n              content: {\n                elementType: \"KdpaSwitch\",\n                children: [],\n                parentId: \"\",\n                style: {},\n                attrs: {},\n                selfClosing: true,\n                dependency: {\n                  type: \"package\",\n                  version: \"latest\",\n                  path: \"kdpa-components\",\n                  meta: {\n                    namedImport: true,\n                  },\n                },\n              },\n            },\n            checked: {\n              type: \"codeBlock\",\n              code: \"$args[0]?.value\",\n            },\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          selfClosing: true,\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Switch component is a customizable switch built on top of MUI's Switch component,\nit can be used for toggle on/off the switch.\nName Tag : KdpaSwitch\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n\ndynamic attrs:\n1- title: string\n2- defaultValue: boolean"
  },
  {
    "elementType": "TAB_CONTAINER",
    "code": "import * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsProps } from \"@radix-ui/react-tabs\";\n\nimport \"./KdTabsRoot.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabRoot = styled(Tabs.Root)();\n\nexport interface KdTabsRootProps extends TabsProps {\n  children?: React.ReactNode;\n}\n\nfunction KdTabsRoot({ children, ...props }: KdTabsRootProps) {\n  return (\n    <StyledTabRoot dir=\"rtl\" className=\"KdTabsRoot\" {...props}>\n      {children}\n    </StyledTabRoot>\n  );\n}\n\nexport default KdTabsRoot;\n",
    "meta": "{\n  elementType: \"KdTabsRoot\",\n  children: [],\n  parentId: \"\",\n  style: {\n    backgroundColor: { type: \"static\", content: \"#ffffff\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The TabConatiner component is a customizable tab container built on top of @radix-ui/react-tabs's TabConatiner component,\nit can be use to show a tab in the page.\nand only can used TabElement component as children.\nName Tag : KdTabConatiner\nchildren element: TabElement"
  },
  {
    "elementType": "TAB_ELEMENT",
    "code": "import * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsListProps } from \"@radix-ui/react-tabs\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport \"./KdTabsList.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabList = styled(Tabs.List)();\n\nexport interface KdTabsListProps extends TabsListProps {\n  children?: React.ReactNode;\n}\n\nfunction KdTabsList({ children, ...props }: KdTabsListProps) {\n  return (\n    <PerfectScrollbar>\n      <StyledTabList className=\"KdTabsList\" {...props}>\n        {children}\n      </StyledTabList>\n    </PerfectScrollbar>\n  );\n}\n\nexport default KdTabsList;\n\nimport * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsContentProps } from \"@radix-ui/react-tabs\";\nimport \"./KdTabsContent.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabContent = styled(Tabs.Content)();\n\nexport interface KdTabsContentProps extends TabsContentProps {\n  children?: React.ReactNode;\n}\nfunction KdTabsContent({ children, ...props }: KdTabsContentProps) {\n  return (\n    <StyledTabContent className=\"KdTabsContent\" {...props}>\n      {children}\n    </StyledTabContent>\n  );\n}\n\nexport default KdTabsContent;\n\nimport * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsTriggerProps } from \"@radix-ui/react-tabs\";\nimport { styled } from \"@mui/material/styles\";\nimport { useTheme } from \"@mui/material\";\n\nexport interface KdTabsTriggerProps extends TabsTriggerProps {\n  children?: React.ReactNode;\n}\n\nconst StyledTabsTrigger = styled(Tabs.Trigger)<{ activeColor: string }>`\n  font-family: inherit;\n  background-color: inherit;\n  width: 50px;\n  padding: 0 20px;\n  height: 45px;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  font-size: 15px;\n  line-height: 1;\n  border: none;\n  user-select: none;\n\n  &[data-state=\"active\"] {\n    color: ${(props: any) => props?.activeColor ?? \"#7367aa\"};\n    border-bottom: 3px solid ${(props: any) => props?.activeColor ?? \"#7367aa\"};\n  }\n`;\n\nfunction KdTabsTrigger({ children, ...props }: KdTabsTriggerProps) {\n  const theme = useTheme();\n  const activeColor = theme?.palette?.primary?.main;\n\n  return (\n    <StyledTabsTrigger\n      className=\"KdTabsTrigger\"\n      activeColor={activeColor}\n      {...props}\n    >\n      {children}\n    </StyledTabsTrigger>\n  );\n}\n\nexport default KdTabsTrigger;\n",
    "meta": "{\n  elementType: \"KdTabsContent\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The TabElement component is a customizable tab element built on top of @radix-ui/react-tabs's Tab component,\nthis component is for each tab in the TabContainer component.\nName Tag : KdTabElement\nchildren element: any element\n\nstatic attrs: \n1- label: string"
  },
  {
    "elementType": "TAG_BOX_INPUT",
    "code": "import { useEffect, useMemo } from \"react\";\nimport { useController, useFormContext } from \"react-hook-form\";\nimport { KdpaTypography, KdpaAutoComplete } from \"../../../../components\";\n\nexport interface KdTagBoxInputProps {\n  name: string;\n  rules?: any;\n  autoComplete?: boolean;\n  // defaultValueKey?: string;\n  defaultValue?: string | number | string[] | number[];\n  onChange?: (e: unknown) => void;\n  split?: string;\n  [x: string]: any;\n}\n\nfunction KdTagBoxInput({\n  name = \"\",\n  rules = {},\n  options,\n  getOptionValue = (option: any) => option.value,\n  defaultValue,\n  split,\n  ...props\n}: KdTagBoxInputProps) {\n  const { control, setValue } = useFormContext();\n\n  const defaultDropDownValue = useMemo(\n    () => (defaultValue ? defaultValue : null),\n    [defaultValue]\n  );\n\n  useEffect(() => {\n    setValue(name, defaultDropDownValue);\n  }, [defaultDropDownValue]);\n\n  const {\n    field,\n    fieldState: { error },\n  } = useController({\n    control,\n    name,\n    rules,\n    shouldUnregister: true,\n    defaultValue: defaultDropDownValue,\n  });\n\n  function handleChange(...args: any[]) {\n    if (split && split?.length > 0) {\n      field.onChange(args[1]?.join(split));\n      props?.onChange?.(args[1]?.join(split));\n    } else {\n      field.onChange(args[1]);\n      props?.onChange?.(args[1]);\n    }\n  }\n\n  return (\n    <>\n      {/* @ts-ignore */}\n      <KdpaAutoComplete\n        {...field}\n        {...props}\n        value={\n          split && split?.length > 0 && field?.value\n            ? field?.value?.split(split)\n            : []\n        }\n        error={!!error}\n        multiple\n        freeSolo\n        options={options?.map((el: any) => getOptionValue(el)) ?? []}\n        onChange={handleChange}\n      />\n\n      {error && error.message && (\n        <KdpaTypography variant=\"caption\" sx={{ color: \"red\" }}>\n          {error.message}\n        </KdpaTypography>\n      )}\n    </>\n  );\n}\n\nexport default KdTagBoxInput;\n",
    "meta": "{\n  elementType: \"KdTagBoxInput\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  selfClosing: true,\n  attrs: {\n    split: { type: \"static\", content: \"@\" },\n    variant: { type: \"static\", content: \"outlined\" },\n    noOptionsText: { type: \"static\", content: \"بدون مقدار\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The TagBoxInput component is a customizable tag box input built on top of MUI's AutoComplete component,\nthis component is like of DropDown Element and used AutoComplete but in this component user can be \nselect from a list or type a new tag and add it to the list of tags.\nName Tag : KdTagBoxInput\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- placeholder: string\n3- helperText: string\n4- variant: filled | outlined | standard\n5- size: small | medium\n7- limitTags: number\n\ndynamic attrs:\n1- title: string\n2- defaultValue: string\n3- options: list of string"
  },
  {
    "elementType": "TEXT_BOX",
    "code": "import React from \"react\";\nimport TextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport { NumericFormat } from \"react-number-format\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst NumericFormatCustom = React.forwardRef(function NumericFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, onBlur, ...other } = props;\n  return (\n    <NumericFormat\n      thousandSeparator\n      valueIsNumericString\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            value: values.value,\n          },\n        });\n      }}\n      onBlur={(e) => {\n        onBlur({\n          ...e,\n          target: {\n            ...e?.target,\n            value: (e?.target?.value ?? \"\")?.split(\",\").join(\"\"),\n          },\n        });\n      }}\n    />\n  );\n});\nexport type KdpaInputProps = TextFieldProps & {\n  textAlign?: \"left\" | \"right\" | \"center\";\n  dir?: \"ltr\" | \"rtl\";\n  loading?: boolean;\n  readOnly?: boolean;\n};\n\nconst KdpaInput = React.forwardRef<HTMLInputElement, KdpaInputProps>(\n  ({ dir, ...props }, ref) => {\n    return (\n      <TextField\n        sx={{ width: \"100%\" }}\n        inputRef={ref}\n        variant=\"standard\"\n        size=\"small\"\n        {...props}\n        value={props?.value === null ? \"\" : props?.value}\n        helperText={props?.error ? undefined : props?.helperText}\n        InputProps={{\n          ...props.InputProps,\n          readOnly:\n            props?.readOnly !== undefined\n              ? props.readOnly\n              : props.InputProps?.readOnly,\n          endAdornment: (\n            <>\n              {props?.loading ? (\n                <CircularProgress color=\"inherit\" size={20} />\n              ) : null}\n              {props.InputProps?.endAdornment}\n            </>\n          ),\n          inputComponent:\n            props.type === \"price\"\n              ? NumericFormatCustom\n              : props?.InputProps?.inputComponent,\n        }}\n        inputProps={{\n          ...props.inputProps,\n          style: {\n            ...props.inputProps?.style,\n            direction: dir,\n            textAlign: props?.textAlign,\n          },\n        }}\n      />\n    );\n  }\n);\n\nexport default KdpaInput;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    variant: { type: \"static\", content: \"outlined\" },\n    label: { type: \"static\", content: \"input1\" },\n    placeholder: { type: \"static\", content: \"placeholder\" },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaInput\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The TextBox component is a customizable text box built on top of MUI's TextField component,\nit can be used for input text in the form.\nName Tag : KdpaInput\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- placeholder: string\n3- helperText: string\n4- variant: filled | outlined | standard\n5- size: small | medium\n6- type: text | number | price | email | password\n7- dir: rtl | ltr\n8- multiline: boolean\n9- rows: number\n10- autoFocus: boolean\n\ndynamic attrs:\n1- title: string\n2- defaultValue: string\n3- loading: boolean\n4- readOnly: boolean"
  },
  {
    "elementType": "TIME_PICKER",
    "code": "import { useMemo } from \"react\";\nimport moment from \"jalali-moment\";\nimport { AdapterDateFnsJalali } from \"@mui/x-date-pickers/AdapterDateFnsJalali\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport {\n  DesktopTimePicker,\n  DesktopTimePickerProps,\n} from \"@mui/x-date-pickers/DesktopTimePicker\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFnsV3\";\nimport { renderTimeViewClock } from \"@mui/x-date-pickers/timeViewRenderers\";\n\nexport type KdpaTimePickerProps<T> = DesktopTimePickerProps<T> & {\n  required?: boolean;\n  variant?: \"standard\" | \"outlined\" | \"filled\";\n  helperText?: string;\n  error?: boolean;\n  InputProps?: any;\n  title?: string;\n  locale?: \"fa\" | \"en\" | \"ar\";\n  minTimeValue?: \"NOW\" | \"CUSTOM\";\n  maxTimeValue?: \"NOW\" | \"CUSTOM\";\n};\n\nfunction KdpaTimePicker<T>({\n  locale,\n  error = false,\n  required = false,\n  minTimeValue,\n  maxTimeValue,\n  defaultValue,\n  value,\n  ...props\n}: KdpaTimePickerProps<T>) {\n  const defaultLocale = locale || localStorage.getItem(\"i18nextLng\") || \"fa\";\n\n  const adaptor = useMemo(() => {\n    switch (defaultLocale) {\n      case \"fa\":\n        return AdapterDateFnsJalali;\n      case \"en\":\n        return AdapterDateFns;\n      case \"ar\":\n        return AdapterDateFns;\n      default:\n        return AdapterDateFnsJalali;\n    }\n  }, [defaultLocale]);\n\n  return (\n    <LocalizationProvider dateAdapter={adaptor}>\n      <DesktopTimePicker\n        {...props}\n        slotProps={{\n          actionBar: { actions: [] },\n          textField: {\n            variant: props?.variant,\n            size: \"small\",\n            required: required,\n            error: error,\n            helperText: error ? undefined : props?.helperText,\n            InputProps: props?.InputProps,\n            title: props?.title,\n          },\n        }}\n        sx={{ width: \"100%\", ...props?.sx }}\n        minTime={\n          minTimeValue === \"NOW\"\n            ? (new Date() as T)\n            : minTimeValue === \"CUSTOM\" && props?.minTime\n            ? (new Date(props?.minTime as any) as T)\n            : props?.minTime\n        }\n        maxTime={\n          maxTimeValue === \"NOW\"\n            ? (new Date() as T)\n            : maxTimeValue === \"CUSTOM\" && props?.maxTime\n            ? (new Date(props?.maxTime as any) as T)\n            : props?.maxTime\n        }\n        onChange={(value) => {\n          // convert type date to ISO\n          //@ts-ignore\n          const convertValue = moment(value).locale(\"en\").format();\n          //@ts-ignore\n          props?.onChange(\n            convertValue.toString() === \"Invalid date\" ? null : convertValue\n          );\n        }}\n        {...(defaultValue\n          ? //@ts-ignore\n            { defaultValue: new Date(defaultValue || undefined) }\n          : {})}\n        //@ts-ignore\n        value={value ? new Date(value || null) : undefined}\n        viewRenderers={{\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        }}\n      />\n    </LocalizationProvider>\n  );\n}\n\nexport default KdpaTimePicker;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaTimePicker\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The TimePicker component is a customizable time picker built on top of @mui/x-date-pickers's TimePicker component,\nit can be used for select time in the application.\nName Tag : KdpaTimePicker\nchildren element: not have children element and self closing element\n\nstatic attrs:\n1- label: string\n2- placeholder: string\n3- helperText: string\n4- variant: filled | outlined | standard\n5- ampm: boolean\n6- locale: fa | en\n7- format: \"hh:mm\" | ...\n8- views: list of (seconds | minutes | hours)\n\ndynamic attrs:\n1- title: string\n2- defaultValue: string"
  },
  {
    "elementType": "TOOLTIP",
    "code": "import Zoom from \"@mui/material/Zoom\";\nimport Tooltip, { TooltipProps } from \"@mui/material/Tooltip\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledSpan = styled(\"span\")();\nexport type KdTooltipProps = Pick<\n  TooltipProps,\n  \"placement\" | \"title\" | \"arrow\" | \"enterDelay\" | \"leaveDelay\"\n> & {\n  [key: string]: any;\n};\n\nconst KdTooltip = ({\n  title = \"\",\n  arrow,\n  children,\n  placement,\n  enterDelay,\n  leaveDelay,\n  ...props\n}: KdTooltipProps) => {\n  return (\n    <Tooltip\n      title={title}\n      TransitionComponent={Zoom}\n      enterDelay={enterDelay}\n      leaveDelay={leaveDelay}\n      arrow={arrow}\n      placement={placement}\n    >\n      <StyledSpan {...props}>{children}</StyledSpan>\n    </Tooltip>\n  );\n};\n\nexport default KdTooltip;\n",
    "meta": "{\n    elementType: \"KdTooltip\",\n    children: [],\n    parentId: \"\",\n    style: {},\n    attrs: {},\n    dependency: {\n      type: \"package\",\n      version: \"latest\",\n      path: \"kdpa-components\",\n      meta: {\n        namedImport: true,\n      },\n    },\n  }",
    "description": "The Tooltip component is a customizable tooltip built on top of MUI's Tooltip component,\nit can be used to show a tooltip when the user hovers over the element.\nName Tag : KdTooltip\nchildren element: any element\n\ndynamic attrs:\n1- title: string"
  },
  {
    "elementType": "TYPOGRAPHY",
    "code": "import { KdpaTypography, KdpaTypographyProps } from \"../../../components\";\nimport { typographyHelper } from \"./typographyHelper\";\n\ntype TypeFormat =\n  | \"DD-MM-YYYY\"\n  | \"MM-DD-YYYY\"\n  | \"YYYY-MM-DD\"\n  | \"DD/MM/YYYY\"\n  | \"YY-MM-DD\";\n\ntype TypeFormatTime =\n  | \"hh:mm:ss\"\n  | \"HH:mm:ss\"\n  | \"hh:mm\"\n  | \"HH:mm\"\n  | \"hh:mm a\"\n  | \"hh:mm:ss a\";\n\ntype TypeFormatDateTime =\n  | \"YYYY/MM/DD HH:mm:ss\"\n  | \"YYYY-MM-DD hh:mm:ss a\"\n  | \"YYYY/MM/DD hh:mm:ss a\";\n\nexport type TypeMeta = {\n  type?:\n    | \"string\"\n    | \"number\"\n    | \"date\"\n    | \"time\"\n    | \"date-time\"\n    | \"boolean\"\n    | \"html\";\n  maxLength?: number;\n  typeNumber?: \"int\" | \"float\" | \"cost\";\n  format?: TypeFormat;\n  formatTime?: TypeFormatTime;\n  formatDateTime?: TypeFormatDateTime;\n  loc?: \"fa\" | \"en\" | \"ar\";\n  ignoreTags?: boolean;\n};\n\nexport type KdTypographyProps = KdpaTypographyProps & TypeMeta;\n\nconst KdTypography = ({ type = \"string\", ...props }: KdTypographyProps) => {\n  const meta: TypeMeta = {\n    type: type,\n    maxLength: props.maxLength,\n    typeNumber: props.typeNumber,\n    format: props.format,\n    formatTime: props.formatTime,\n    formatDateTime: props.formatDateTime,\n    loc: props.loc,\n    ignoreTags: props.ignoreTags ?? true,\n  };\n\n  return (\n    <KdpaTypography {...props}>\n      {typographyHelper(props.children, meta)}\n    </KdpaTypography>\n  );\n};\n\nexport default KdTypography;\n",
    "meta": "{\n  elementType: \"KdTypography\",\n  children: [],\n  parentId: \"\",\n  style: {\n    minHeight: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {\n    variant: { type: \"static\", content: \"body1\" },\n    type: { type: \"static\", content: \"string\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}",
    "description": "The Typography component is a customizable text component built on top of MUI's Typography component,\nthis component used for any text in the application.\nName Tag : KdTypography\nchildren element:  not have children element and self closing element\n\nstatic attrs: \n1- variant: body1 | body2 | h1 | h2 | ...\n2- type: string | number | date | time | date-time | html\n\ndynamic attrs:\n1- title: string\n2- data: string | number | ..."
  }
]